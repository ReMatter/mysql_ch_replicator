<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="5" skipped="0" tests="31" time="104.034" timestamp="2025-08-29T21:35:23.262981+00:00" hostname="orbstack"><testcase classname="tests.integration.data_types.test_datetime_replication.TestDatetimeReplication" name="test_datetime_with_microseconds" time="1.055" /><testcase classname="tests.integration.data_types.test_advanced_data_types.TestAdvancedDataTypes" name="test_spatial_and_geometry_types" time="1.175" /><testcase classname="tests.integration.data_types.test_datetime_replication.TestDatetimeReplication" name="test_datetime_timezone_handling" time="1.103" /><testcase classname="tests.integration.data_types.test_advanced_data_types.TestAdvancedDataTypes" name="test_enum_and_set_types" time="1.022" /><testcase classname="tests.integration.data_types.test_datetime_replication.TestDatetimeReplication" name="test_invalid_datetime_update_replication" time="1.024" /><testcase classname="tests.integration.data_types.test_advanced_data_types.TestAdvancedDataTypes" name="test_invalid_datetime_handling" time="2.542" /><testcase classname="tests.integration.data_types.test_datetime_types.TestDatetimeTypes" name="test_datetime_and_date_types" time="1.053" /><testcase classname="tests.integration.data_types.test_enum_normalization.TestEnumNormalization" name="test_enum_lowercase_and_zero" time="1.071" /><testcase classname="tests.integration.data_types.test_advanced_data_types.TestAdvancedDataTypes" name="test_complex_employee_table_types" time="2.546" /><testcase classname="tests.integration.data_types.test_json_comprehensive.TestJsonComprehensive" name="test_json_basic_operations" time="1.048" /><testcase classname="tests.integration.data_types.test_json_comprehensive.TestJsonComprehensive" name="test_json_unicode_keys" time="1.042" /><testcase classname="tests.integration.data_types.test_binary_padding.TestBinaryPadding" name="test_binary_16_padding" time="1.054" /><testcase classname="tests.integration.data_types.test_json_comprehensive.TestJsonComprehensive" name="test_json_complex_structures" time="1.012" /><testcase classname="tests.integration.data_types.test_boolean_bit_types.TestBooleanBitTypes" name="test_boolean_and_bit_types" time="30.678"><failure message="assert False&#10; +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffff810d6340&gt;()">tests/integration/data_types/test_boolean_bit_types.py:57: in test_boolean_and_bit_types
    self.wait_for_table_sync(TEST_TABLE_NAME, expected_count=3)
tests/base/base_replication_test.py:182: in wait_for_table_sync
    assert_wait(table_exists, max_wait_time=max_wait_time)
tests/conftest.py:162: in assert_wait
    assert condition()
E   assert False
E    +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffff810d6340&gt;()</failure></testcase><testcase classname="tests.integration.data_types.test_null_value_handling.TestNullValueHandling" name="test_null_value_handling" time="1.097" /><testcase classname="tests.integration.data_types.test_numeric_comprehensive.TestNumericComprehensive" name="test_decimal_and_numeric_types" time="1.079" /><testcase classname="tests.integration.data_types.test_numeric_comprehensive.TestNumericComprehensive" name="test_numeric_boundary_limits" time="1.081" /><testcase classname="tests.integration.data_types.test_numeric_comprehensive.TestNumericComprehensive" name="test_precision_and_scale_decimals" time="1.080" /><testcase classname="tests.integration.data_types.test_numeric_comprehensive.TestNumericComprehensive" name="test_unsigned_extremes" time="1.079" /><testcase classname="tests.integration.data_types.test_polygon_type.TestPolygonType" name="test_polygon_replication" time="2.640" /><testcase classname="tests.integration.data_types.test_text_blob_types.TestTextBlobTypes" name="test_text_and_blob_types" time="1.103" /><testcase classname="tests.integration.data_types.test_year_type.TestYearType" name="test_year_type_mapping" time="30.665"><failure message="assert False&#10; +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffffae032020&gt;()">tests/integration/data_types/test_year_type.py:41: in test_year_type_mapping
    self.wait_for_table_sync(TEST_TABLE_NAME, expected_count=4)
tests/base/base_replication_test.py:182: in wait_for_table_sync
    assert_wait(table_exists, max_wait_time=max_wait_time)
tests/conftest.py:162: in assert_wait
    assert condition()
E   assert False
E    +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffffae032020&gt;()</failure></testcase><testcase classname="tests.integration.data_types.test_comprehensive_data_types.TestComprehensiveDataTypes" name="test_different_types_comprehensive_1" time="1.092" /><testcase classname="tests.integration.data_types.test_comprehensive_data_types.TestComprehensiveDataTypes" name="test_different_types_comprehensive_2" time="1.091" /><testcase classname="tests.integration.data_types.test_datetime_defaults.TestDatetimeDefaults" name="test_valid_datetime_defaults_replication" time="1.081" /><testcase classname="tests.integration.data_types.test_datetime_defaults.TestDatetimeDefaults" name="test_datetime_test_table_replication" time="30.612"><failure message="assert False&#10; +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffff80d1ce00&gt;()">tests/integration/data_types/test_datetime_defaults.py:108: in test_datetime_test_table_replication
    self.wait_for_table_sync(table_name, expected_count=3)
tests/base/base_replication_test.py:182: in wait_for_table_sync
    assert_wait(table_exists, max_wait_time=max_wait_time)
tests/conftest.py:162: in assert_wait
    assert condition()
E   assert False
E    +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffff80d1ce00&gt;()</failure></testcase><testcase classname="tests.integration.data_types.test_datetime_defaults.TestDatetimeDefaults" name="test_utf8mb4_charset_with_datetime" time="1.020" /><testcase classname="tests.integration.data_types.test_datetime_defaults.TestDatetimeDefaults" name="test_schema_evolution_datetime_defaults" time="2.627" /><testcase classname="tests.integration.data_types.test_datetime_replication.TestDatetimeReplication" name="test_zero_datetime_handling" time="30.649"><failure message="assert False&#10; +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffffae032ca0&gt;()">tests/integration/data_types/test_datetime_replication.py:112: in test_zero_datetime_handling
    self.wait_for_table_sync(table_name, expected_count=2)
tests/base/base_replication_test.py:182: in wait_for_table_sync
    assert_wait(table_exists, max_wait_time=max_wait_time)
tests/conftest.py:162: in assert_wait
    assert condition()
E   assert False
E    +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffffae032ca0&gt;()</failure></testcase><testcase classname="tests.integration.data_types.test_datetime_replication.TestDatetimeReplication" name="test_valid_datetime_replication" time="30.598"><failure message="assert False&#10; +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffff80d1d260&gt;()">tests/integration/data_types/test_datetime_replication.py:56: in test_valid_datetime_replication
    self.wait_for_table_sync(table_name, expected_count=3)
tests/base/base_replication_test.py:182: in wait_for_table_sync
    assert_wait(table_exists, max_wait_time=max_wait_time)
tests/conftest.py:162: in assert_wait
    assert condition()
E   assert False
E    +  where False = &lt;function BaseReplicationTest.wait_for_table_sync.&lt;locals&gt;.table_exists at 0xffff80d1d260&gt;()</failure></testcase><testcase classname="tests.integration.data_types.test_datetime_replication.TestDatetimeReplication" name="test_datetime_boundary_values" time="1.095" /></testsuite></testsuites>